	cookie/cookie.go:	"github.com/gin-contrib/sessions"
	cookie/cookie_test.go:	"github.com/gin-contrib/sessions"
	cookie/cookie_test.go:	"github.com/gin-contrib/sessions/tester"
	_example/cookie/main.go:	"github.com/gin-contrib/sessions"
	_example/cookie/main.go:	"github.com/gin-contrib/sessions/cookie"
	_example/cookie/main.go:	"github.com/gin-gonic/gin"
	_example/cookie/main.go:	r := gin.Default()
	_example/cookie/main.go:	r.GET("/incr", func(c *gin.Context) {
	_example/cookie/main.go:		c.JSON(200, gin.H{"count": count})
	_example/memcached/ascii/ascii.go:	"github.com/gin-contrib/sessions"
	_example/memcached/ascii/ascii.go:	"github.com/gin-contrib/sessions/memcached"
	_example/memcached/ascii/ascii.go:	"github.com/gin-gonic/gin"
	_example/memcached/ascii/ascii.go:	r := gin.Default()
	_example/memcached/ascii/ascii.go:	r.GET("/incr", func(c *gin.Context) {
	_example/memcached/ascii/ascii.go:		c.JSON(200, gin.H{"count": count})
	_example/memcached/binary/binary.go:	"github.com/gin-contrib/sessions"
	_example/memcached/binary/binary.go:	"github.com/gin-contrib/sessions/memcached"
	_example/memcached/binary/binary.go:	"github.com/gin-gonic/gin"
	_example/memcached/binary/binary.go:	r := gin.Default()
	_example/memcached/binary/binary.go:	r.GET("/incr", func(c *gin.Context) {
	_example/memcached/binary/binary.go:		c.JSON(200, gin.H{"count": count})
	_example/memstore/main.go:	"github.com/gin-contrib/sessions"
	_example/memstore/main.go:	"github.com/gin-contrib/sessions/memstore"
	_example/memstore/main.go:	"github.com/gin-gonic/gin"
	_example/memstore/main.go:	r := gin.Default()
	_example/memstore/main.go:	r.GET("/incr", func(c *gin.Context) {
	_example/memstore/main.go:		c.JSON(200, gin.H{"count": count})
	_example/mongo/main.go:	"github.com/gin-contrib/sessions"
	_example/mongo/main.go:	"github.com/gin-contrib/sessions/mongo"
	_example/mongo/main.go:	"github.com/gin-gonic/gin"
	_example/mongo/main.go:	r := gin.Default()
	_example/mongo/main.go:	r.GET("/incr", func(c *gin.Context) {
	_example/mongo/main.go:		c.JSON(200, gin.H{"count": count})
	_example/postgres/main.go:	"github.com/gin-contrib/sessions"
	_example/postgres/main.go:	"github.com/gin-contrib/sessions/postgres"
	_example/postgres/main.go:	"github.com/gin-gonic/gin"
	_example/postgres/main.go:	r := gin.Default()
	_example/postgres/main.go:	r.GET("/incr", func(c *gin.Context) {
	_example/postgres/main.go:		c.JSON(200, gin.H{"count": count})
	_example/redis/main.go:	"github.com/gin-contrib/sessions"
	_example/redis/main.go:	"github.com/gin-contrib/sessions/redis"
	_example/redis/main.go:	"github.com/gin-gonic/gin"
	_example/redis/main.go:	r := gin.Default()
	_example/redis/main.go:	r.GET("/incr", func(c *gin.Context) {
	_example/redis/main.go:		c.JSON(200, gin.H{"count": count})
	LICENSE:      represent, as a whole, an original work of authorship. For the purposes
	LICENSE:      the original version of the Work and any modifications or additions
	LICENSE:      cross-claim or counterclaim in a lawsuit) alleging that the Work
	LICENSE:      origin of the Work and reproducing the content of the NOTICE file.
	memcached/memcached.go:	"github.com/gin-contrib/sessions"
	memcached/memcached_test.go:	"github.com/gin-contrib/sessions"
	memcached/memcached_test.go:	"github.com/gin-contrib/sessions/tester"
	memstore/memstore.go:	"github.com/gin-contrib/sessions"
	memstore/memstore_test.go:	"github.com/gin-contrib/sessions"
	memstore/memstore_test.go:	"github.com/gin-contrib/sessions/tester"
	mongo/mongo.go:	"github.com/gin-contrib/sessions"
	mongo/mongo_test.go:	"github.com/gin-contrib/sessions"
	mongo/mongo_test.go:	"github.com/gin-contrib/sessions/tester"
	postgres/postgres.go:	"github.com/gin-contrib/sessions"
	postgres/postgres_test.go:	"github.com/gin-contrib/sessions"
	postgres/postgres_test.go:	"github.com/gin-contrib/sessions/tester"
	redis/redis.go:	"github.com/gin-contrib/sessions"
	redis/redis_test.go:	"github.com/gin-contrib/sessions"
	redis/redis_test.go:	"github.com/gin-contrib/sessions/tester"
	sessions.go:	"github.com/gin-gonic/gin"
	sessions.go:	DefaultKey  = "github.com/gin-contrib/sessions"
	sessions.go:func Sessions(name string, store Store) gin.HandlerFunc {
	sessions.go:	return func(c *gin.Context) {
	sessions.go:func SessionsMany(names []string, store Store) gin.HandlerFunc {
	sessions.go:	return func(c *gin.Context) {
	sessions.go:func Default(c *gin.Context) Session {
	sessions.go:func DefaultMany(c *gin.Context, name string) Session {
	tester/tester.go:	"github.com/gin-contrib/sessions"
	tester/tester.go:	"github.com/gin-gonic/gin"
	tester/tester.go:	gin.SetMode(gin.TestMode)
	tester/tester.go:	r := gin.Default()
	tester/tester.go:	r.GET("/set", func(c *gin.Context) {
	tester/tester.go:	r.GET("/get", func(c *gin.Context) {
	tester/tester.go:	r := gin.Default()
	tester/tester.go:	r.GET("/set", func(c *gin.Context) {
	tester/tester.go:	r.GET("/delete", func(c *gin.Context) {
	tester/tester.go:	r.GET("/get", func(c *gin.Context) {
	tester/tester.go:	r := gin.Default()
	tester/tester.go:	r.GET("/set", func(c *gin.Context) {
	tester/tester.go:	r.GET("/flash", func(c *gin.Context) {
	tester/tester.go:	r.GET("/check", func(c *gin.Context) {
	tester/tester.go:	r := gin.Default()
	tester/tester.go:	r.GET("/set", func(c *gin.Context) {
	tester/tester.go:	r.GET("/check", func(c *gin.Context) {
	tester/tester.go:	r := gin.Default()
	tester/tester.go:	r.GET("/domain", func(c *gin.Context) {
	tester/tester.go:	r.GET("/path", func(c *gin.Context) {
	tester/tester.go:	r := gin.Default()
	tester/tester.go:	r.GET("/set", func(c *gin.Context) {
	tester/tester.go:	r.GET("/get", func(c *gin.Context) {
	tester/tester_options_samesite_go1.10.go:	"github.com/gin-gonic/gin"
	tester/tester_options_samesite_go1.10.go:func testOptionSameSitego(t *testing.T, r *gin.Engine) {
	tester/tester_options_samesite_go1.11.go:	"github.com/gin-contrib/sessions"
	tester/tester_options_samesite_go1.11.go:	"github.com/gin-gonic/gin"
	tester/tester_options_samesite_go1.11.go:func testOptionSameSitego(t *testing.T, r *gin.Engine) {
	tester/tester_options_samesite_go1.11.go:	r.GET("/sameSite", func(c *gin.Context) {
